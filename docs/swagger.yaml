---
swagger: "2.0"
info:
  description: >+
    Vipps PSP API gives the PSP the ability to process Vipps payment as a part\
    of their payment offerings. By using PSP API, PSP’s still have full transactional\
    control for payments initiated in their payment terminals.\nVipps PSP API allows\
    PSP’s to initiate payments for end users to accept with the Vipps mobile app.\
    After customer confirms the payment, Vipps enrich payment data with encrypted\
    credit card details and hand over payment processing to PSP"

    # Idempotency

    All API requests in Vipps eCommerce can be retried without any side effects
    by providing idempotent key in a header of  the request. For example, in
    case the request fails because of network error it can safely be retried
    with the same idempotent key. Idempotent key is generated by merchant.
      ```
      {
        -H "X-Request-Id: slvnwdcweofjwefweklfwelf"
      }
      ```

    # Authentication

    Every API call is authenticated and authorized based on the application
    Authorization token (JWT Bearer token) and APIM subscription key
    (Ocp-Apim-Subscription-Key). In addition, APP Id need to be provided in
    request header in order to authenticate the application the merchant has
    registered. Following headers are required to be there in every API request
    to successfully authenticate every API call.

      | **Header Name** | **Header Value** | **Description** |
      | :-------------------------- | :--------------------------- | :--------------------------------------------- |
      | Authorization | Bearer 'jwt_access_token'' | type: Authorization token<br>Value: Access token is obtained by registering merchant backend application in Merchant Developer Portal. |
      | Ocp-Apim-Subscription-Key | Base 64 encoded string | Subscription key for eCommerce product.<br>This can be found in User Profile page on Merchant developer portal after merchant account is created |
  version: "1.0"
  title: "PSP API V2"
basePath: "/dwo-api-application"
tags:
- name: "dwo-merchant-query-controller"
  description: "DWO Merchant Query Controller"
- name: "psp-payment-controller"
  description: "PSP Payment Controller"
- name: "psp-initiate-payment-controller"
  description: "PSP Initiate Payment Controller"
- name: "Authorization Service"
  description: "Authorization Service"
paths:
  /accesstoken/get:
    post:
      tags:
        - Authorization Service
      summary: Fetch authorization token
      parameters:
        - name: client_id
          in: header
          description: Client ID received when merchant registered the application
          required: false
          type: string
          format: guid
        - name: client_secret
          in: header
          description: Client Secret received when merchant registered the application
          required: false
          type: string
        - name: ocp-apim-subscription-key
          in: header
          description: >-
            Subscription key for eCommerce product. This can be found in User
            Profile page on Merchant developer portal after merchant account is
            created
          required: false
          type: string
      description: >-
        Authorization token API endpoint helps to get the JWT Bearer token that
        needs to be passed in every API request in the authorization header. The
        merchant application use the API to get a JWT access token. JWT access
        token is a base 64 encoded string value that must be aquire first before
        making any Vipps api calls
      operationId: fetchAuthorizationTokenUsingPost
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AuthorizationTokenResponse'
        '400':
          description: Bad request (Missing a required parameter or Bad request formats)
        '401':
          description: Unauthorized
        '402':
          description: Payment Failed
        '403':
          description: Request Forbidden
        '404':
          description: Resource Not Found
        '405':
          description: Request method not supported
        '415':
          description: Unsupported media type
        '500':
          description: Something went wrong from Vipps Server side
  /v2/psppayments/init:
    post:
      tags:
      - "psp-initiate-payment-controller"
      summary: "Initiate a PSP Payment"
      operationId: "initiatePaymentV2UsingPOST"
      consumes:
      - "application/json;charset=UTF-8"
      produces:
      - "application/json;charset=UTF-8"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "Bearer JWT-TOKEN, generated using GetAccessToken API"
        required: true
        type: "string"
        default: "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcmdhbml6YXRpb25OdW1iZXIiOiI5MTg3MTM4NjciLCJpc3MiOiJ2aXBwcy5ubyIsImV4cCI6MTY0NDc0Mzg5NywiYWNjb3VudE51bWJlciI6IjE4MDAwMDAwMDAwIn0.mqO4RsidM_-twRfCvgNnXUUPrXaTgFVMvkJTVmJgtmbHziMVxHnG9moHpEj90_A3MRPp_jucdgMnqixgExOykJCLX6VsiUB0qMLXTgBE7Mmkz3lk0jCgv7OwYDJuLksrXvLepD68KdyDTCVwPxdgqh_H9Tea7S3gSYUnYoNkNP5h7Eyvai6U7BuJVcoE5ckO1ZjGmOvNlfHUbAZYBH8I5RV96bnmEtdtkojrkoZtT7HjueyTZODfdaOyvI5VfMLKbr9qGkYKP0UBKTp9ST5eV-W_Y062PgOsfRNXL2-ltKgn0vDkpUWYGiA8Y98ondXLF1kQIc8pAFPAwhzWG31oM_wKeOjjjK-2lMg1X1LjTk-zbq0HBilhQzbXdW0PHws0p1UZgviW-bdIwRfcjn1ysEqzS0HzDuaRTGIQDeld3MrtcwLLce7PT4rSGZeoJM-pUTidztzX48pFUixLm-aa1-SWnbRIqUufmsylSJNZXjgS06pISGUMKPiAdSjINY17x8YkeptS1B_r56oshRY8BFffCPxtMJI1BAWYQBCQ8WvUadlWNrQ477kUuvauEPRK_eyXT83cANaEa39lBPz4J3PHAE6grV4c3G_rClFzaFl1mzrhUABKJ3CpP_q7LmkboXSI5xx0BkyIb4wG_eG1s7_E_P_T0hIj3CTBNZnu7mI"
      - name: "Ocp-Apim-Subscription-Key"
        in: "header"
        description: "Subscription key for PSP V2 product. This can be found in User\
          \ Profile page on Merchant developer portal after PSP V2 profile is created"
        required: true
        type: "string"
        default: "c1b1a8846ec56d09db39bd3b5403bf9"
      - name: "PSP-ID"
        in: "header"
        description: "PSP ID as defined during PSP enrollment. PSP should share a\
          \ public key to encrypt the card data from TSP via Vipps"
        required: true
        type: "string"
        default: "C948DFD1546347568874C4DDC93A2E3C"
      - name: "MERCHANT-SERIAL-NUMBER"
        in: "header"
        description: "Identifies a merchant sales channel"
        required: true
        type: "string"
        default: "12345"
      - in: "body"
        name: "pspInitiatePaymentRequestDTO"
        description: "pspInitiatePaymentRequestDTO"
        required: true
        schema:
          $ref: "#/definitions/PSPInitiatePaymentRequestV2DTO"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/InitiatePaymentPspV2Representation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorDetails"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorDetails"
        503:
          description: "Service unavailable"
        504:
          description: "Gateway Timeout"
  /makePaymentURL:
    post:
      tags:
      - "psp-initiate-payment-controller"
      summary: "Service end-point exposed by PSP. Used to transfer credit card data\
        \ from TSP to PSP to complete initialized transaction.  \nOutcome of transactional\
        \ processing (RESERVE|CAPTURE|REJECT) will be shown at PSP payment console\
        \ but Vipps must be informed if payment is refused (credit card expired, not\
        \ enough funds etc) or OK. \nCommunication security is established by using\
        \ 1-way SSL and makePaymentToken (If exists in request body)"
      operationId: "makePaymentSwaggerUsingPOST"
      consumes:
      - "application/json;charset=UTF-8"
      produces:
      - "application/json;charset=UTF-8"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "Make payment token sent by PSP in Initiate API"
        required: true
        type: "string"
        default: "uiop"
      - in: "body"
        name: "makePaymentRequest"
        description: "makePaymentRequest"
        required: true
        schema:
          $ref: "#/definitions/MakePaymentRequestPSPV2"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/MakePaymentResponsePSPV2"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
        503:
          description: "Service unavailable"
        504:
          description: "Gateway Timeout"
  /v2/psppayments/updateStatus:
    post:
      tags:
      - "psp-payment-controller"
      summary: "Update the status of the PSP transaction.Since Vipps doesn’t process\
        \ transactions, updates on payment status are required in order to deliver\
        \ expected customer experience. That means that PSP has to inform Vipps about\
        \ any psp payment status change through this service"
      operationId: "updateStatusUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "Bearer JWT-TOKEN, generated using GetAccessToken API"
        required: true
        type: "string"
        default: "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcmdhbml6YXRpb25OdW1iZXIiOiI5MTg3MTM4NjciLCJpc3MiOiJ2aXBwcy5ubyIsImV4cCI6MTY0NDc0Mzg5NywiYWNjb3VudE51bWJlciI6IjE4MDAwMDAwMDAwIn0.mqO4RsidM_-twRfCvgNnXUUPrXaTgFVMvkJTVmJgtmbHziMVxHnG9moHpEj90_A3MRPp_jucdgMnqixgExOykJCLX6VsiUB0qMLXTgBE7Mmkz3lk0jCgv7OwYDJuLksrXvLepD68KdyDTCVwPxdgqh_H9Tea7S3gSYUnYoNkNP5h7Eyvai6U7BuJVcoE5ckO1ZjGmOvNlfHUbAZYBH8I5RV96bnmEtdtkojrkoZtT7HjueyTZODfdaOyvI5VfMLKbr9qGkYKP0UBKTp9ST5eV-W_Y062PgOsfRNXL2-ltKgn0vDkpUWYGiA8Y98ondXLF1kQIc8pAFPAwhzWG31oM_wKeOjjjK-2lMg1X1LjTk-zbq0HBilhQzbXdW0PHws0p1UZgviW-bdIwRfcjn1ysEqzS0HzDuaRTGIQDeld3MrtcwLLce7PT4rSGZeoJM-pUTidztzX48pFUixLm-aa1-SWnbRIqUufmsylSJNZXjgS06pISGUMKPiAdSjINY17x8YkeptS1B_r56oshRY8BFffCPxtMJI1BAWYQBCQ8WvUadlWNrQ477kUuvauEPRK_eyXT83cANaEa39lBPz4J3PHAE6grV4c3G_rClFzaFl1mzrhUABKJ3CpP_q7LmkboXSI5xx0BkyIb4wG_eG1s7_E_P_T0hIj3CTBNZnu7mI"
      - name: "Ocp-Apim-Subscription-Key"
        in: "header"
        description: "Subscription key for PSP V2 product. This can be found in User\
          \ Profile page on Merchant developer portal after PSP V2 profile is created"
        required: true
        type: "string"
        default: "c1b1a8846ec56d09db39bd3b5403bf9"
      - name: "PSP-ID"
        in: "header"
        description: "PSP ID as defined during PSP enrollment. PSP should share a\
          \ public key to encrypt the card data from TSP via Vipps"
        required: true
        type: "string"
        default: "C948DFD1546347568874C4DDC93A2E3C"
      - name: "MERCHANT-SERIAL-NUMBER"
        in: "header"
        description: "Identifies a merchant sales channel"
        required: true
        type: "string"
        default: "12345"
      - in: "body"
        name: "pspPaymentStatusDTO"
        description: "pspPaymentStatusDTO"
        required: true
        schema:
          $ref: "#/definitions/PSPV2PaymentStatusDTO"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ResponseInfo"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorDetails"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorDetails"
        503:
          description: "Service unavailable"
        504:
          description: "Gateway Timeout"
  /v2/psppayments/{pspTransactionId}/details:
    get:
      tags:
      - "dwo-merchant-query-controller"
      summary: "The details of PSP Payment"
      operationId: "getPSPPaymentDetailsUsingGET"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "Bearer JWT-TOKEN, generated using GetAccessToken API"
        required: true
        type: "string"
        default: "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcmdhbml6YXRpb25OdW1iZXIiOiI5MTg3MTM4NjciLCJpc3MiOiJ2aXBwcy5ubyIsImV4cCI6MTY0NDc0Mzg5NywiYWNjb3VudE51bWJlciI6IjE4MDAwMDAwMDAwIn0.mqO4RsidM_-twRfCvgNnXUUPrXaTgFVMvkJTVmJgtmbHziMVxHnG9moHpEj90_A3MRPp_jucdgMnqixgExOykJCLX6VsiUB0qMLXTgBE7Mmkz3lk0jCgv7OwYDJuLksrXvLepD68KdyDTCVwPxdgqh_H9Tea7S3gSYUnYoNkNP5h7Eyvai6U7BuJVcoE5ckO1ZjGmOvNlfHUbAZYBH8I5RV96bnmEtdtkojrkoZtT7HjueyTZODfdaOyvI5VfMLKbr9qGkYKP0UBKTp9ST5eV-W_Y062PgOsfRNXL2-ltKgn0vDkpUWYGiA8Y98ondXLF1kQIc8pAFPAwhzWG31oM_wKeOjjjK-2lMg1X1LjTk-zbq0HBilhQzbXdW0PHws0p1UZgviW-bdIwRfcjn1ysEqzS0HzDuaRTGIQDeld3MrtcwLLce7PT4rSGZeoJM-pUTidztzX48pFUixLm-aa1-SWnbRIqUufmsylSJNZXjgS06pISGUMKPiAdSjINY17x8YkeptS1B_r56oshRY8BFffCPxtMJI1BAWYQBCQ8WvUadlWNrQ477kUuvauEPRK_eyXT83cANaEa39lBPz4J3PHAE6grV4c3G_rClFzaFl1mzrhUABKJ3CpP_q7LmkboXSI5xx0BkyIb4wG_eG1s7_E_P_T0hIj3CTBNZnu7mI"
      - name: "Ocp-Apim-Subscription-Key"
        in: "header"
        description: "Subscription key for eCommerce product. This can be found in\
          \ User Profile page on Merchant developer portal after merchant account\
          \ is created"
        required: true
        type: "string"
        default: "c1b1a8846ec56d09db39bd3b5403bf9"
      - name: "pspTransactionId"
        in: "path"
        description: "pspTransactionId"
        required: true
        type: "string"
      - name: "PSP-ID"
        in: "header"
        description: "PSP ID as defined during PSP enrollment. PSP should share a\
          \ public key to encrypt the card data from TSP via Vipps"
        required: true
        type: "string"
        default: "C948DFD1546347568874C4DDC93A2E3C"
      - name: "MERCHANT-SERIAL-NUMBER"
        in: "header"
        description: "Identifies a merchant sales channel"
        required: true
        type: "string"
        default: "12345"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PSPPaymentDetailsRepresentation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorDetails"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorDetails"
        503:
          description: "Service unavailable"
        504:
          description: "Gateway Timeout"

definitions:
  ErrorDetails:
    type: "object"
    properties:
      errorCode:
        type: "string"
      errorMessage:
        type: "string"
  ErrorMessage:
    type: "object"
    properties:
      errorId:
        type: "string"
        example: "81"
        description: "PSP native ID of the error"
      errorText:
        type: "string"
        example: "No Such Issuer"
        description: "PSP native textual representation of the error"
    example:
      errorText: "No Such Issuer"
      errorId: "81"
  InitiatePaymentPspV2Representation:
    type: "object"
    properties:
      merchantOrderId:
        type: "string"
        example: "8874C4DDC93A2E3C"
        description: "Uniquely identifies a payment order for a merchant"
      pspTransactionId:
        type: "string"
        example: "7686f7788898767977"
        description: "Used as a globally unique transaction reference for the PSP\
          \ systems"
      vippsRedirectUrl:
        type: "string"
        example: "https://vipps.io"
        description: "Vipps URL where customer can enter their mobile number"
    example:
      merchantOrderId: "8874C4DDC93A2E3C"
      pspTransactionId: "7686f7788898767977"
      vippsRedirectUrl: "https://vipps.io"
  MakePaymentRequestPSPV2:
    type: "object"
    properties:
      pspTransactionId:
        type: "string"
        example: "7686f7788898767977"
        description: "Used as a globally unique transaction reference for the PSP\
          \ systems"
      merchantSerialNumber:
        type: "string"
        example: "8874C4DDC93A2E3C"
        description: "Uniquely identifies a payment order for a merchant"
      cardData:
        type: "string"
        example: "f0a29801b4#d4ff30e221fa2980ff30e2"
        description: "Encrypted credit card details"
      confirmed:
        type: "string"
        example: "YES/NO/TIMEOUT/CANCEL"
        description: "Credit Card Details Encryption Status"
        enum:
        - "YES"
        - "NO"
        - "TIMEOUT"
        - "CANCEL"
    example:
      cardData: "f0a29801b4#d4ff30e221fa2980ff30e2"
      merchantSerialNumber: "8874C4DDC93A2E3C"
      pspTransactionId: "7686f7788898767977"
      confirmed: "YES/NO/TIMEOUT/CANCEL"
  MakePaymentResponsePSPV2:
    type: "object"
    properties:
      errorMessage:
        $ref: "#/definitions/ErrorMessage"
      paymentInfo:
        $ref: "#/definitions/PaymentInfoPSPV2"
    example:
      errorMessage:
        errorText: "No Such Issuer"
        errorId: "81"
      paymentInfo:
        pspTransactionId: "7686f7788898767977"
        status: "RESERVE|CAPTURE|REJECT"
  PSPInitiatePaymentRequestV2DTO:
    type: "object"
    properties:
      merchantSerialNumber:
        type: "string"
      pspId:
        type: "string"
      pspTransactionId:
        type: "string"
        example: "7686f7788898767977"
        description: "Used as a globally unique transaction reference for the PSP\
          \ systems"
      merchantOrderId:
        type: "string"
        example: "8874C4DDC93A2E3C"
        description: "Uniquely identifies a payment order for a merchant"
      customerMobileNumber:
        type: "string"
        example: "92929292"
        description: "Mobile number of the user who has to pay for the transaction\
          \ from Vipps"
      amount:
        type: "integer"
        format: "int32"
        example: 100
        description: "Amount should be specified in Øre. 100 Øre conversion 1.00 NOK"
      currency:
        type: "string"
        example: "NOK"
        description: "ISO 4217 defined currency code. Currently Vipps only supports\
          \ NOK"
      pspRedirectUrl:
        type: "string"
        example: "https://psp.vipps.io"
        description: "Vipps will use this URL to redirect end user after payment confirmation"
      makePaymentUrl:
        type: "string"
        example: "https://psp.vipps.io"
        description: "PSP URL used by Vipps to send the card data"
      makePaymentToken:
        type: "string"
        example: "ynuiu"
        description: "Authorization header for MakePayment call"
      paymentText:
        type: "string"
        example: "Order id : "
        description: "Text to be displayed to end user"
      isApp:
        type: "boolean"
        example: true
        description: "Indicates whether payment request is triggered from Mobile App\
          \ or Web browser"
    example:
      pspRedirectUrl: "https://psp.vipps.io"
      amount: 100
      makePaymentToken: "ynuiu"
      makePaymentUrl: "https://psp.vipps.io"
      merchantSerialNumber: "12345"
      pspId: "C948DFD1546347568874C4DDC93A2E3C"
      customerMobileNumber: "92929292"
      currency: "NOK"
      merchantOrderId: "8874C4DDC93A2E3C"
      isApp: true
      pspTransactionId: "7686f7788898767977"
      paymentText: "Order id : "
  PSPPaymentDetailsRepresentation:
    type: "object"
    properties:
      pspTransactionId:
        type: "string"
        example: "12345692"
        description: "PSP ID as defined in agreement with Netaxept TSP. PSP should\
          \ have agreement with Netaxept to get the public key to encrypt the card\
          \ data from NetAxept TSP via Vipps"
      merchantOrderId:
        type: "string"
        example: "56787837"
        description: "Id which uniquely identifies a payment"
      transactionSummary:
        $ref: "#/definitions/TransactionSummary"
      transactionLogHistory:
        type: "array"
        items:
          $ref: "#/definitions/PSPPaymentTransactionDetailsDVO"
    example:
      merchantOrderId: "56787837"
      transactionSummary:
        capturedAmount: 0
        remainingAmountToRefund: 0
        remainingAmountToCapture: 0
        refundedAmount: 1200
      pspTransactionId: "12345692"
      transactionLogHistory:
      - timeStamp: "2018-06-13T18:34:25-07:00"
        amount: 100
        paymentText: "Betaling ordreid:"
        operation: "REFUNDED"
        operationSuccess: false
      - timeStamp: "2018-06-13T18:34:25-07:00"
        amount: 100
        paymentText: "Betaling ordreid:"
        operation: "REFUNDED"
        operationSuccess: false
  PSPPaymentTransactionDetailsDVO:
    type: "object"
    properties:
      amount:
        type: "integer"
        format: "int32"
        example: 100
        description: "Amount should be specified in Øre. 100 Øre conversion 1.00 NOK"
      paymentText:
        type: "string"
        example: "Betaling ordreid:"
        description: "Transaction Note sent by PSP"
      timeStamp:
        type: "string"
        example: "2018-06-13T18:34:25-07:00"
        description: "Timestamp in ISO-8601 representing when Vipps did the payment"
      operation:
        type: "string"
        example: "REFUNDED"
        description: "Transaction Status"
      operationSuccess:
        type: "boolean"
        example: false
        description: "Success or failure for the given operation"
    example:
      timeStamp: "2018-06-13T18:34:25-07:00"
      amount: 100
      paymentText: "Betaling ordreid:"
      operation: "REFUNDED"
      operationSuccess: false
  PSPV2PaymentStatusDTO:
    type: "object"
    properties:
      transactions:
        type: "array"
        items:
          $ref: "#/definitions/PSPV2TransactionInfo"
    example:
      transactions:
      - amount: 100
        currency: "NOK"
        pspTransactionId: "7686f7788898767977"
        paymentText: "Betaling ordreid: 893746"
        status: "CAPTURED"
      - amount: 100
        currency: "NOK"
        pspTransactionId: "7686f7788898767977"
        paymentText: "Betaling ordreid: 893746"
        status: "CAPTURED"
  PSPV2TransactionInfo:
    type: "object"
    properties:
      pspTransactionId:
        type: "string"
        example: "7686f7788898767977"
        description: "PSP ID as defined in agreement with Netaxept TSP. PSP should\
          \ have agreement with Netaxept to get the public key to encrypt the card\
          \ data from NetAxept TSP via Vipps"
      status:
        type: "string"
        example: "CAPTURED"
        description: "PSP Transaction Status to be updated in Vipps"
      amount:
        type: "integer"
        format: "int32"
        example: 100
        description: "Amount should be specified in Øre. 100 Øre conversion 1.00 NOK"
      currency:
        type: "string"
        example: "NOK"
        description: "ISO 4217 defined currency code. Currently Vipps only supports\
          \ NOK"
      paymentText:
        type: "string"
        example: "Betaling ordreid: 893746"
    example:
      amount: 100
      currency: "NOK"
      pspTransactionId: "7686f7788898767977"
      paymentText: "Betaling ordreid: 893746"
      status: "CAPTURED"
  PaymentInfoPSPV2:
    type: "object"
    properties:
      pspTransactionId:
        type: "string"
        example: "7686f7788898767977"
        description: "Used as a globally unique transaction reference for the PSP\
          \ systems"
      status:
        type: "string"
        example: "RESERVE|CAPTURE|REJECT"
        description: "Status of the transaction"
        enum:
        - "OK"
        - "FAIL"
    example:
      pspTransactionId: "7686f7788898767977"
      status: "RESERVE|CAPTURE|REJECT"
  AuthorizationTokenResponse:
    type: object
    properties:
      token_type:
        type: string
      access_token:
        type: string
      ext_expires_in:
        type: integer
      not_before:
        type: integer
      expires_in:
        type: integer
        format: int32
      resource:
        type: string
  TransactionSummary:
    type: "object"
    properties:
      capturedAmount:
        type: "integer"
        format: "int32"
        example: 0
        description: "Total amount captured"
      remainingAmountToCapture:
        type: "integer"
        format: "int32"
        example: 0
        description: "Total remaining amount to capture"
      refundedAmount:
        type: "integer"
        format: "int32"
        example: 1200
        description: "Total refunded amount of the order"
      remainingAmountToRefund:
        type: "integer"
        format: "int32"
        example: 0
        description: "Total remaining amount to refund"
    example:
      capturedAmount: 0
      remainingAmountToRefund: 0
      remainingAmountToCapture: 0
      refundedAmount: 1200
  ResponseInfo:
    type: "object"
    properties:
      responseCode:
        type: "string"
      responseMessage:
        type: "string"
